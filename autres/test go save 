package main

import (
	"bufio"
	"log"
	"math/rand"
	"net/http"
	"os"
	"text/template"
	"time"
)

type HangManData struct {
	WordToGuess       string
	DisplayedWord     string
	Found             []string
	AttemptsRemaining int
	GameStage         []string
	Lettre            string
}

func Home(w http.ResponseWriter, r *http.Request) {
	template, err := template.ParseFiles("HTMLL/forms.html", "HTMLL/footer.html", "HTMLL/header.html")
	if err != nil {
		log.Fatal(err)
	}
	template.Execute(w, nil)
}

func ChooseFile(w http.ResponseWriter, r *http.Request) {
	choice := 1
	wordToGuess := GetRandomWord(choice)
	http.Redirect(w, r, "/", http.StatusFound)
	_ = wordToGuess
}

func FormulaireHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method == "POST" {
		err := r.ParseForm()
		if err != nil {
			http.Error(w, "Erreur", http.StatusInternalServerError)
			return
		}

		lettre := r.FormValue("Lettre")

		choice := 1
		wordToGuess := GetRandomWord(choice)

		data := HangManData{
			WordToGuess:       wordToGuess,
			Found:             []string{lettre},
			AttemptsRemaining: 6,
			GameStage:         []string{},
			Lettre:            lettre,
		}

		data.DisplayedWord = DisplayGameStatus(data.WordToGuess, data.Found, data.AttemptsRemaining, data.GameStage)

		template, err := template.ParseFiles("HTMLL/forms.html", "HTMLL/footer.html", "HTMLL/header.html")
		if err != nil {
			log.Fatal(err)
		}

		template.Execute(w, data)
		return
	}

	http.Redirect(w, r, "http://localhost:8080", http.StatusFound)
}

func GetRandomWord(choice int) string {
	var filename string
	switch choice {
	case 1:
		filename = "words.txt"
	case 2:
		filename = "words2.txt"
	case 3:
		filename = "words3.txt"
	}

	words, err := ReadWordsFromFile(filename)
	if err != nil {
		log.Fatal(err)
	}

	rand.Seed(time.Now().UnixNano())
	return GetRandomWordFromList(words)
}

func DisplayGameStatus(word string, found []string, attemptsRemaining int, stage []string) string {
	return DisplayWord(word, found)
}

func DisplayWord(word string, found []string) string {
	displayedWord := ""
	for _, letter := range word {
		if Contains(found, string(letter)) {
			displayedWord += string(letter) + " "
		} else {
			displayedWord += "_ "
		}
	}
	return displayedWord
}

func Contains(slice []string, s string) bool {
	for _, value := range slice {
		if value == s {
			return true
		}
	}
	return false
}

func ReadWordsFromFile(filename string) ([]string, error) {
	file, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	var words []string
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		words = append(words, scanner.Text())
	}

	if err := scanner.Err(); err != nil {
		return nil, err
	}

	return words, nil
}

func GetRandomWordFromList(words []string) string {
	randIndex := rand.Intn(len(words))
	return words[randIndex]
}

func main() {
	http.HandleFunc("/", Home)
	http.HandleFunc("/hangman", FormulaireHandler)
	http.HandleFunc("/choosefile", ChooseFile)
	fs := http.FileServer(http.Dir("CSS/"))
	http.Handle("/CSS/", http.StripPrefix("/CSS", fs))
	log.Println("Serveur allum√©")
	http.ListenAndServe(":8080", nil)
}
